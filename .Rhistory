ravel_main <- read.csv("andile_all_runs_dada2_abundance_table_PECAN_taxa-merged_StR_CST.csv")
View(ravel_main)
ravel_asv <- read.csv("andile_all_runs_dada2_abundance_table_PECAN_asvs+taxa.csv")
View(ravel_asv)
asv_taxa <- read.table("cmb_tx.txt ")
asv_taxa <- read.table("cmb_tx.txt")
View(asv_taxa)
taxa_upto_genus <- read.csv("andile_silva_classification.csv")
View(taxa_upto_genus)
library(Biostrings)
seqs_asvs <- readDNAStringSet("all_runs_dada2_ASV.fasta")
View(seqs_asvs)
names(seqs_asvs)
seqs_asvs
View(data.frame(readDNAStringSet("all_runs_dada2_ASV.fasta")))
seqs_asvs <- data.frame(readDNAStringSet("all_runs_dada2_ASV.fasta"))
View(seqs_asvs)
colnames(seqs_asvs) <- "sequences"
colnames(seqs_asvs) <- "sequence"
seqs_asvs$ASV <- rownames(seqs_asvs)
colnames(asv_taxa) <- c("ASV", "Species")
## Add species:
seqs_asvs[asv_taxa$ASV, "Species"] <- asv_taxa$Species
## Add species:
seqs_asvs[order(asv_taxa$ASV), "Species"] <- asv_taxa$Species
seqs_asvs <- data.frame(readDNAStringSet("all_runs_dada2_ASV.fasta"))
colnames(seqs_asvs) <- "sequence"
seqs_asvs$ASV <- rownames(seqs_asvs)
rownames(asv_taxa) <- asv_taxa$ASV
## Add species:
seqs_asvs[order(asv_taxa$ASV), "Species"] <- asv_taxa$Species
library(dplyr)
seqs_asvs <- data.frame(readDNAStringSet("all_runs_dada2_ASV.fasta"))
colnames(seqs_asvs) <- "sequence"
seqs_asvs$ASV <- rownames(seqs_asvs)
## Add species:
seqs_asvs_sp <- inner_join(seqs_asvs, asv_taxa, by = "ASV")
str(seqs_asvs)
str(asv_taxa)
asv_taxa$ASV <- as.factor(asv_taxa$ASV)
## Add species:
seqs_asvs_sp <- inner_join(seqs_asvs, asv_taxa, by = "ASV")
asv_taxa$ASV <- as.character(asv_taxa$ASV)
## Add species:
seqs_asvs_sp <- inner_join(seqs_asvs, asv_taxa, by = "ASV")
View(seqs_asvs_sp)
colnames(taxa_upto_genus)[1] <- "ASV"
taxa_upto_genus_seqs <- inner_join(seqs_asvs, taxa_upto_genus, by = "ASV")
str(taxa_upto_genus)
taxa_upto_genus$ASV <- as.character(taxa_upto_genus$ASV)
taxa_upto_genus_seqs <- inner_join(seqs_asvs, taxa_upto_genus, by = "ASV")
View(taxa_upto_genus_seqs)
## Add species:
taxa_table <- inner_join(taxa_upto_genus_seqs, asv_taxa, by = "ASV")
View(taxa_table)
rownames(taxa_table) <- taxa_table$sequence
taxa_table_final <- as.matrix(taxa_table[, c(3:9)])
View(taxa_table_final)
saveRDS(taxa_table_final, "tax_table_final.RDS")
### OTU table
dim(ravel_main)
unique(taxa_table$ASV)
unique(taxa_table$Species)
dim(ravel_asv)
colnames(ravel_asv)
rownames(ravel_asv)
unique(colnames(ravel_asv))
### Extract CSTs
metadata_cst <- ravel_main[, c(1, 377-393)]
### Extract CSTs
metadata_cst <- ravel_main[, c(1, 377:393)]
View(metadata_cst)
saveRDS(metadata_cst, "metadata_cst.RDS")
242-138
metadata_cst$visit <- sapply(str_split(metadata_cst$sampleID, "_", n = 2, simplify = FALSE), `[`, 2)
library(stringi)
metadata_cst$visit <- sapply(str_split(metadata_cst$sampleID, "_", n = 2, simplify = FALSE), `[`, 2)
library(stringr)
metadata_cst$visit <- sapply(str_split(metadata_cst$sampleID, "_", n = 2, simplify = FALSE), `[`, 2)
metadata_cst$visit <- sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 2)
metadata_cst[is.na(metadata_cst$visit), "visit"] <- 1000
metadata_cst$SID <- ifelse(visit == 1000, paste0(sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 1),
ifelse(visit == 1020, paste0(sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 2),
paste0(sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 3)))
metadata_cst$SID <- ifelse(metadata_cst$visit == 1000, paste0(sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 1),
ifelse(metadata_cst$visit == 1020, paste0(sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 2),
paste0(sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 3)))
### Extract CSTs
metadata_cst <- ravel_main[, c(1, 377:393)]
metadata_cst$visit <- sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 2)
metadata_cst[is.na(metadata_cst$visit), "visit"] <- 1000
metadata_cst$sampleID <- ifelse(metadata_cst$visit == 1000, paste0(sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 1),
ifelse(metadata_cst$visit == 1020, paste0(sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 2),
paste0(sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 3)))
saveRDS(metadata_cst, "metadata_cst.RDS")
colnames(metadata_cst)[1] <- SampleID
colnames(metadata_cst)[1] <- "SampleID"
saveRDS(metadata_cst, "metadata_cst.RDS")
colnames(ravel_asv)[1]
colnames(ravel_asv)[1] <- "SampleID"
ravel_asv_ <- ravel_asv[-1, ]
head(ravel_asv_)
View(ravel_asv_)
ravel_asv_$visit <- sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 2)
ravel_asv_[is.na(ravel_asv_$visit), "visit"] <- 1000
ravel_asv_$sampleID <- ifelse(ravel_asv_$visit == 1000, paste0(sapply(str_split(ravel_asv_$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 1),
ifelse(ravel_asv_$visit == 1020, paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 2),
paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 3)))
ravel_asv_ <- ravel_asv[-1, ]
ravel_asv_$visit <- sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 2)
ravel_asv_[is.na(ravel_asv_$visit), "visit"] <- 1000
ravel_asv_$SampleID <- ifelse(ravel_asv_$visit == 1000, paste0(sapply(str_split(ravel_asv_$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 1),
ifelse(ravel_asv_$visit == 1020, paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 2),
paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 3)))
rownames(ravel_asv_) <- ravel_asv_$SampleID
duplicated(ravel_asv_$SampleID)
ravel_asv_$SampleID[duplicated(ravel_asv_$SampleID)]
ravel_asv_$SampleID
ravel_asv_$SampleID <- ifelse(ravel_asv_$visit == 1000, paste0(sapply(str_split(ravel_asv_$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 1),
ifelse(ravel_asv_$visit == 1020, paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 2),
paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 3)))
ravel_asv_$SampleID[duplicated(ravel_asv_$SampleID)]
ravel_asv_$visit
str(ravel_asv_)
ravel_asv_ <- ravel_asv[-1, ]
ravel_asv_$visit <- sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 2)
ravel_asv_[is.na(ravel_asv_$visit), "visit"] <- 1000
ravel_asv_$SampleID <- ifelse(ravel_asv_$visit == 1000, paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 1),
ifelse(ravel_asv_$visit == 1020, paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 2),
paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 3)))
ravel_asv_$SampleID[duplicated(ravel_asv_$SampleID)]
rownames(ravel_asv_) <- ravel_asv_$SampleID
View(taxa_table)
colnames(ravel_asv_)[2:ncol(ravel_asv_)] <- rownames(taxa_table)
dim(taxa_table)
dim(ravel_asv_)
tail(colnames(ravel_asv_))
ravel_asv_ <- ravel_asv[-1, ]
ravel_asv_$visit <- sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 2)
ravel_asv_[is.na(ravel_asv_$visit), "visit"] <- 1000
ravel_asv_$SampleID <- ifelse(ravel_asv_$visit == 1000, paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 1),
ifelse(ravel_asv_$visit == 1020, paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 2),
paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 3)))
ravel_asv_$SampleID[duplicated(ravel_asv_$SampleID)]
rownames(ravel_asv_) <- ravel_asv_$SampleID
tail(colnames(ravel_asv_))
ravel_asv_$visit <- NULL
colnames(ravel_asv_)[2:ncol(ravel_asv_)] <- rownames(taxa_table)
saveRDS(ravel_asv_, "seqtab_rl_final.RDS")
## Construct phylogenetic tree
seqs <- getSequences(ravel_asv_)
library(DECIPHER); packageVersion("DECIPHER")
library(phangorn); packageVersion("phangorn")
## Construct phylogenetic tree
seqs <- getSequences(ravel_asv_)
library(dada2)
## Construct phylogenetic tree
seqs <- getSequences(ravel_asv_)
otu_table <- as.matrix(ravel_asv_)
saveRDS(otu_table, "seqtab_rl_final.RDS")
## Construct phylogenetic tree
seqs <- getSequences(otu_table)
names(seqs) <- seqs # This propagates to the tip labels of the tree
seqs
## Construct phylogenetic tree
seqs <- getSequences(t(otu_table))
names(seqs) <- seqs # This propagates to the tip labels of the tree
seqs
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA,
processors = detectCores() - 1) ## AlignSeqs function from package Decipher
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA,
processors = detectCores() - 1) ## AlignSeqs function from package Decipher
write.table(names(seqs), sep = "\n")
write.table(names(seqs), "seqs.txt", sep = "\n")
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA,
processors = detectCores() - 1) ## AlignSeqs function from package Decipher
?AlignSeqs
dim(otu_table)
ravel_asv_ <- ravel_asv[c(2:nrow(ravel_asv)), ]
dim(ravel_asv_)
View(ravel_asv[c(2:nrow(ravel_asv)), ])
View(ravel_asv)
otu_table <- as.matrix(ravel_asv_[, c(2:ncol(ravel_asv_))])
View(otu_table )
ravel_asv_ <- ravel_asv[c(2:nrow(ravel_asv)), ]
ravel_asv_$visit <- sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 2)
ravel_asv_[is.na(ravel_asv_$visit), "visit"] <- 1000
ravel_asv_$SampleID <- ifelse(ravel_asv_$visit == 1000, paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 1),
ifelse(ravel_asv_$visit == 1020, paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 2),
paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 3)))
ravel_asv_$SampleID[duplicated(ravel_asv_$SampleID)]
rownames(ravel_asv_) <- ravel_asv_$SampleID
ravel_asv_$visit <- NULL
otu_table <- as.matrix(ravel_asv_[, c(2:ncol(ravel_asv_))])
colnames(otu_table) <- rownames(taxa_table)
dim(otu_table)
View(otu_table)
saveRDS(otu_table, "seqtab_rl_final.RDS")
## Construct phylogenetic tree
seqs <- getSequences(t(otu_table))
head(names(seqs))
names(seqs)
## Construct phylogenetic tree
seqs <- getSequences(otu_table)
names(seqs) <- seqs # This propagates to the tip labels of the tree
names(seqs)
## Construct phylogenetic tree
seqs <- getSequences(t(otu_table))
names(seqs) <- seqs # This propagates to the tip labels of the tree
seqs
##write.table(names(seqs), "seqs.txt", sep = "\n")
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA,
processors = detectCores() - 1) ## AlignSeqs function from package Decipher
writeXStringSet(alignment, "aligned_seqs.fasta")
phang.align <- phyDat(as(alignment, "matrix"), type="DNA") ## phyDat function from package phangorn
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phang.align)
write.tree(fit$tree, file = "tree.newick")
## negative edges length changed to 0!
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
saveRDS(fitGTR, "phangorn.tree.RDS")
write.tree(fitGTR$tree, file = "tree.GTR.newick")
detach("package:phangorn", unload=TRUE)
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
library(Biostrings)
library(dplyr)
library(stringr)
library(DECIPHER); packageVersion("DECIPHER")
library(phangorn); packageVersion("phangorn")
library(dada2)
## negative edges length changed to 0!
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
write.tree(fitGTR$tree, file = "tree.GTR.newick")
help(strsplit)
str(otu_table)
View(otu_table)
otu_table <- as.matrix(ravel_asv_[, c(2:ncol(ravel_asv_))])
View(otu_table)
class(otu_table) <- "numeric"
colnames(otu_table) <- rownames(taxa_table)
saveRDS(otu_table, "seqtab_rl_final.RDS")
library(Biostrings)
library(dplyr)
library(stringr)
library(DECIPHER); packageVersion("DECIPHER")
library(phangorn); packageVersion("phangorn")
library(dada2)
ravel_main <- read.csv("andile_all_runs_dada2_abundance_table_PECAN_taxa-merged_StR_CST.csv")
colSums(ravel_main$Lactobacillus_crispatus)
ravel_main <- read.csv("andile_all_runs_dada2_abundance_table_PECAN_taxa-merged_StR_CST.csv")
ravel_asv <- read.csv("andile_all_runs_dada2_abundance_table_PECAN_asvs+taxa.csv")
rm(list = ls())
library(Biostrings)
library(dplyr)
library(stringr)
library(DECIPHER); packageVersion("DECIPHER")
library(phangorn); packageVersion("phangorn")
library(dada2)
ravel_main <- read.csv("andile_all_runs_dada2_abundance_table_PECAN_taxa-merged_StR_CST.csv")
ravel_asv <- read.csv("andile_all_runs_dada2_abundance_table_PECAN_asvs+taxa.csv")
asv_taxa <- read.table("cmb_tx.txt")
View(asv_taxa)
colnames(asv_taxa) <- c("ASV", "Species")
rownames(asv_taxa) <- asv_taxa$ASV
asv_taxa$ASV <- as.character(asv_taxa$ASV)
View(ravel_asv)
ravel_asv <- as_tibble(read.csv("andile_all_runs_dada2_abundance_table_PECAN_asvs+taxa.csv"))
class(ravel_asv)
View(ravel_asv)
head(ravel_asv)
head(ravel_main)
View(asv_taxa)
View(taxa_upto_genus)
colnames(asv_taxa) <- c("ASV", "Species")
rownames(asv_taxa) <- asv_taxa$ASV
asv_taxa$ASV <- as.character(asv_taxa$ASV)
taxa_upto_genus <- read.csv("andile_silva_classification.csv")
View(taxa_upto_genus)
colnames(taxa_upto_genus)[1] <- "ASV"
taxa_upto_genus$ASV <- as.character(taxa_upto_genus$ASV)
seqs_asvs <- data.frame(readDNAStringSet("all_runs_dada2_ASV.fasta"))
head(seqs_asvs)
colnames(seqs_asvs) <- "sequence"
seqs_asvs$ASV <- rownames(seqs_asvs)
View(seqs_asvs)
seqs_asvs <- data.frame(readDNAStringSet("all_runs_dada2_ASV.fasta"))
colnames(seqs_asvs) <- "sequence"
seqs_asvs$ASV <- rownames(seqs_asvs)
taxa_upto_genus_seqs <- inner_join(seqs_asvs, taxa_upto_genus, by = "ASV")
View(taxa_upto_genus_seqs)
## Add species:
taxa_table <- inner_join(taxa_upto_genus_seqs, asv_taxa, by = "ASV")
View(taxa_table)
rownames(taxa_table) <- taxa_table$sequence
taxa_table_final <- as.matrix(taxa_table[, c(3:9)])
saveRDS(taxa_table_final, "tax_table_final.RDS")
View(taxa_table_final)
### Extract CSTs
metadata_cst <- ravel_main[, c(1, 377:393)]
metadata_cst$visit <- sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 2)
metadata_cst[is.na(metadata_cst$visit), "visit"] <- 1000
metadata_cst$sampleID <- ifelse(metadata_cst$visit == 1000, paste0(sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 1),
ifelse(metadata_cst$visit == 1020, paste0(sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 2),
paste0(sapply(str_split(metadata_cst$sampleID, "-", n = 2, simplify = FALSE), `[`, 1), 3)))
colnames(metadata_cst)[1] <- "SampleID"
saveRDS(metadata_cst, "metadata_cst.RDS")
dim(ravel_asv)
colnames(ravel_asv)[1] <- "SampleID"
ravel_asv_ <- ravel_asv[c(2:nrow(ravel_asv)), ]
ravel_asv_$visit <- sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 2)
ravel_asv_[is.na(ravel_asv_$visit), "visit"] <- 1000
ravel_asv_$SampleID <- ifelse(ravel_asv_$visit == 1000, paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 1),
ifelse(ravel_asv_$visit == 1020, paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 2),
paste0(sapply(str_split(ravel_asv_$SampleID, "-", n = 2, simplify = FALSE), `[`, 1), 3)))
ravel_asv_$SampleID[duplicated(ravel_asv_$SampleID)]
rownames(ravel_asv_) <- ravel_asv_$SampleID
ravel_asv_$visit <- NULL
otu_table <- as.matrix(ravel_asv_[, c(2:ncol(ravel_asv_))])
head(as_tibble(otu_table))
View(otu_table)
dim(otu_table)
head(ravel_asv)
head(ravel_asv[1])
dim(ravel_main)
